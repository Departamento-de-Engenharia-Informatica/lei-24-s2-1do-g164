@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "GSM" as GSM
participant ":AgendaEntryUI" as ui
participant ":TeamToAgendaEntryController " as ctrl
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as plat
participant "agendaEntryRepository:\nAgendaEntryRepository" as agendaRepo
participant "AgendaEntryMapper" as agendaMapper
participant AgendaEntryDTO as AgendaEntryDTO
participant "AgendaEntry" as agendaEntry
participant "Team" as team
participant "teamRepository:\nTeamRepository" as teamRepo
participant "TeamMapper"
participant "TeamDTO" as TeamDTO
participant "ApllicationSession" as app


activate GSM

                GSM -> ui : asks to assign a team to an agenda entry

                activate ui

                ui -> ctrl** : create

                activate ctrl

                ctrl-> agendaMapper** : create

                ctrl -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> ctrl: repositories
                deactivate RepositorySingleton

                ctrl -> plat : getAgendaEntryRepository()
                activate plat

                    plat --> ctrl: AgendaEntryRepository()
                deactivate plat

                ctrl-> plat: getTeamrepository
                activate plat

                plat--> ctrl: teamRepository

                deactivate plat

                ui-> ctrl: getAgendaEntryDTOList()


                ctrl -> agendaRepo : getAgendaEntryList()
                activate agendaRepo

                agendaRepo --> ctrl: agendaEntryList
                deactivate agendaRepo

                ctrl -> agendaMapper : toDtoList(agendaEntryList)
                activate agendaMapper


                 loop for each agendaEntry in agendaEntryList

                 agendaMapper -> AgendaEntryDTO : agendaEntryDTO = toDTO(agendaEntry)

                  activate AgendaEntryDTO
                  end
                deactivate AgendaEntryDTO

                agendaMapper --> ctrl : agendaEntryDTOList
                deactivate agendaMapper

                ui -> ctrl :  getTeamDTOList()

                ctrl -> teamRepo : showAvailableTeams()
                activate teamRepo

                teamRepo --> ctrl: teamList
                deactivate teamRepo

                ctrl -> "TeamMapper":  toDtoList(teamList)
                activate "TeamMapper"

                loop  [for each Team in TeamList]

                "TeamMapper" -> TeamDTO: teamDTO = toDTO(team)
                activate TeamDTO

                end
                deactivate TeamDTO
                "TeamMapper" --> ctrl: TeamDTOList

                 deactivate "TeamMapper"
                 ctrl --> ui : agendaEntryDTOList
                 ctrl --> ui: teamDTOList

                 ui --> GSM: shows the list of entries in the agenda\n and the list of  teams and asks to select one of each

                 GSM -> ui: selects entry and team

                 ui->ctrl: assignTeamToAgendaEntry(agendaEntryDTO)

                 ctrl -> agendaMapper : toEntity(teamDTO)
                 activate agendaMapper

                 agendaMapper-> team: team = toEntity(teamDTO)
                 activate team
                 team--> agendaMapper: team
                 deactivate team

                 agendaMapper --> ctrl: team


                 ctrl -> agendaMapper : toEntity(agendaEntryDTO)


                 agendaMapper-> agendaEntry: agendaEntry = toEntity(agendaEntryDTO)
                 activate agendaEntry
                 agendaEntry--> agendaMapper: agendaEntry
                  agendaMapper --> ctrl: agendaEntry

                 deactivate agendaMapper


                 deactivate agendaEntry

                 ctrl -> agendaRepo: updateTeam(agendaEntry,team)
                 activate agendaRepo

                 agendaRepo--> ctrl: team


                agendaRepo -> agendaEntry: setAssociatedTeam(team)
                activate agendaEntry

                ctrl->ctrl: sendNotificationEmails(team)
                deactivate agendaEntry
                    note left: gets the collaborators for each team and\ngets the email of each collaborator
                ctrl-> app :  sendEmail(email, body)

                activate app

                ctrl --> ui: success/insuccess
                deactivate app
                ui--> GSM: shows (in))success message




deactivate GSM

@enduml