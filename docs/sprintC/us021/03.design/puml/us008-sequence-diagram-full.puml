@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "GSM" as Employee
participant "ToDoListUI" as UI
participant ":RegisterToDoEntryController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "ToDoEntryRepository\n:toDoEntryRepository" as TaskRepo
participant "ToDoEntryMapper"
participant "ToDoEntryDTO"

activate Employee

    Employee -> UI : asks to add a new entry to the "To Do List"\n to the Agenda

    activate UI

        UI -> CTRL : getGreenSpaceList()
        activate CTRL

            CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton

                RepositorySingleton --> CTRL: repositories
            deactivate RepositorySingleton

            CTRL -> TaskRepo : getList()
            activate TaskRepo

                TaskRepo --> CTRL : GreenSpaceList
            deactivate TaskRepo

            CTRL -> "ToDoEntryMapper" : getGreenSpaceDTOsList(toDoEntryList)
            activate "ToDoEntryMapper"

            loop for each toDoEntry in availableToDoEntryList
                ToDoEntryMapper -> ToDoEntryDTO: toDoEntryDTO = toDTO(toDoEntry)
                activate ToDoEntryDTO
                deactivate ToDoEntryDTO

            end

            ToDoEntryMapper --> CTRL: toDoEntryDTOList
            deactivate ToDoEntryMapper

            CTRL --> UI : toDoEntryDTOsList
        deactivate CTRL

        UI --> Employee : displays the Green Spaces and asks to select one
    deactivate UI

    Employee -> UI : selects the desired Green Space
    activate UI

    UI -> CTRL : getUrgencyDegreeList()
            activate CTRL

    CTRL -> UrgencyDegrees : getUrgencyDegreeList()
    deactivate CTRL
    activate UrgencyDegrees
    UrgencyDegrees --> CTRL : UrgencyDegrees.values()
deactivate UrgencyDegrees
activate CTRL
CTRL -> UI : UrgencyDegrees.values()
deactivate CTRL
        UI -> Employee : displays urgency degrees and asks to select one
    deactivate UI

    Employee -> UI : selects the desired urgency degree
    activate UI
    UI -> Employee: asks to type description and expected duration
    deactivate UI
    Employee -> UI : types the requested data
    activate UI

        UI -> "ToDoEntryDTO" : create(description, expectedDuration,\n greenSpace, UrgencyDegree)
        activate ToDoEntryDTO
        UI <-- "ToDoEntryDTO" : toDoEntryDTO
deactivate "ToDoEntryDTO"
        UI -> CTRL : registerToDoEntry(toDoEntryDTO)
        activate CTRL
        deactivate


            CTRL -> "ToDoEntryMapper" : toEntity(toDoEntryDTO)
            activate "ToDoEntryMapper"
            deactivate

                "ToDoEntryMapper" -> ToDoEntry : ToDoEntry(toDoEntryDTO.description, toDoEntryDTO.expectedDuration, \ntoDoEntryDTO.greenSpace, toDoEntryDTO.urgencyDegree)
                "ToDoEntryMapper" --> CTRL : toDoEntry
            deactivate "ToDoEntryMapper"

            CTRL -> TaskRepo : registerToDoEntry(toDoEntry)
            activate TaskRepo

                TaskRepo --> CTRL : success
            deactivate TaskRepo

            CTRL --> UI : success
        deactivate CTRL

        UI --> Employee : displays message of (in)success
    deactivate UI

deactivate Employee

@enduml
