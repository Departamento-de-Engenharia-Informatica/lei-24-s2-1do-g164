@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "GSM" as GSM
participant ":AgendaEntryUI" as ui
participant ":TeamToAgendaEntryController " as ctrl
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as plat
participant "agendaEntryRepository:\nAgendaEntryRepository" as agendaRepo
participant "AgendaEntryMapper" as agendaMapper
participant AgendaEntryDTO as AgendaEntryDTO
participant "AgendaEntry" as agendaEntry
participant "Team" as team
participant "teamRepository:\nTeamRepository" as teamRepo
participant "TeamMapper"
participant "TeamDTO" as TeamDTO
participant "ApllicationSession" as app


activate GSM

                GSM -> ui : asks to assign a team to an agenda entry

                activate ui

                ui -> ctrl** : create

                activate ctrl

                ctrl-> agendaMapper** : create
                ctrl -> app** : create

                ctrl -> RepositorySingleton : getInstance()
                activate RepositorySingleton

                    RepositorySingleton --> ctrl: repositories
                deactivate RepositorySingleton

                ctrl -> plat : getAgendaEntryRepository()
                activate plat

                    plat --> ctrl: AgendaEntryRepository()
                deactivate plat

                ctrl-> plat: getTeamrepository
                activate plat

                plat--> ctrl: teamRepository

                deactivate plat

                ui-> ctrl: getAgendaEntryDTOList()
                ui -> ctrl :   showAvailableTeams()


                ctrl -> agendaRepo : getAgendaEntryList()
                activate agendaRepo

                agendaRepo --> ctrl: agendaEntryList
                deactivate agendaRepo

                ctrl -> agendaMapper : toDtoList(agendaEntryList)
                activate agendaMapper
                deactivate ctrl


                 loop for each agendaEntry in agendaEntryList

                 agendaMapper -> AgendaEntryDTO** : agendaEntryDTO = toDTO(agendaEntry)

                  activate AgendaEntryDTO
                  end
                deactivate AgendaEntryDTO

                agendaMapper --> ctrl : agendaEntryDTOList
                deactivate agendaMapper
                activate ctrl



                ctrl -> teamRepo :getTeams()
                activate teamRepo

                teamRepo --> ctrl: teams
                deactivate teamRepo

                ctrl -> "TeamMapper":  toDtoList(teams)
                activate "TeamMapper"
                deactivate ctrl
                loop  [for each Team in TeamList]

                "TeamMapper" -> TeamDTO: teamDTO = toDTO(team)
                activate TeamDTO

                end
                deactivate TeamDTO
                "TeamMapper" --> ctrl: teamDTOList
                   activate ctrl
                 deactivate "TeamMapper"
                 ctrl --> ui : agendaEntryDTOList
                 ctrl --> ui: teamDTOList
                deactivate ctrl
                 ui --> GSM: shows the list of entries in the agenda\n and the list of  teams and asks to select one of each

                 GSM -> ui: selects entry and team

                 ui->AgendaEntryDTO: create(description, greenSpace, team)


                 ui->ctrl: assignTeamToAgendaEntry(AgendaEntryDTO dto)
                 activate ctrl

                 deactivate AgendaEntryDTO
                 ctrl -> agendaRepo: getAgendaEntry(description, greenSpace)

                 note right: iterates through the agenda entry list and gets the\n agenda entry by description and greenSpace of the DTO


                 activate agendaRepo



                 agendaRepo--> ctrl: agendaEntry

                 ctrl -> agendaEntry**: create
                 ctrl -> agendaRepo: updateTeam(agendaEntry, team)


                agendaRepo -> agendaEntry: setAssociatedTeam(team)

                 agendaRepo--> ctrl: success/insucess
                    deactivate

                ctrl->ctrl: sendNotificationEmails(team)
                deactivate agendaEntry
                    note left: gets the collaborators for each team and\ngets the email of each collaborator
                ctrl-> app :  sendEmail(email, body)


                ctrl --> ui: success/insuccess
                deactivate app
                ui--> GSM: shows (in))success message

deactivate GSM

@enduml