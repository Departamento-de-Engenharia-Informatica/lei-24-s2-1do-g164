@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "FM" as ADM
participant ":MarkTaskCompletedUI" as UI
participant ":MarkTaskCompletedController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "toDoEntryRepository:\nToDoEntryRepository" as TaskCategoryRepository
participant "ToDoEntryMapper"

activate ADM

ADM -> UI : asks to mark a task as completed
activate UI

UI -> CTRL : create
activate CTRL

activate CTRL
 CTRL-> "AgendaEntryMapper"** : create
deactivate "AgendaEntryMapper"

UI -> CTRL : getToDoEntries()

CTRL -> RepositorySingleton : getInstance()
activate RepositorySingleton

RepositorySingleton --> CTRL : repositories
deactivate RepositorySingleton

CTRL -> PLAT : getToDoEntryRepository()
activate PLAT

PLAT --> CTRL : ToDoEntryRepository()
deactivate PLAT

CTRL -> TaskCategoryRepository : getToDoEntryList()
activate TaskCategoryRepository

TaskCategoryRepository --> CTRL : ToDoEntryList
deactivate TaskCategoryRepository

CTRL -> "AgendaEntryMapper" : toDTO(ToDoEntryList)
activate "AgendaEntryMapper"

loop for each agendaEntry in ToDoEntryList
    "AgendaEntryMapper" -> "EntriesBetweenDatesDTO" : ToDoEntryDTO = toDTO(toDoEntry)
    activate "EntriesBetweenDatesDTO"
    deactivate "EntriesBetweenDatesDTO"
end
"AgendaEntryMapper" --> CTRL : EntriesBetweenDatesListDTO
deactivate "AgendaEntryMapper"

CTRL --> UI : EntriesBetweenDatesListDTO

UI --> ADM : show the list of entries

ADM -> UI : asks to mark a task as completed
UI -> CTRL : taskAsCompleted(entry)
CTRL -> TaskCategoryRepository : taskAsCompleted(entry)
activate TaskCategoryRepository
TaskCategoryRepository -> CTRL : Success
deactivate TaskCategoryRepository
CTRL --> UI : Success
UI --> ADM : Confirm task completion

deactivate ADM
@enduml
